---
import AppStoreButton from './AppStoreButton.astro';
const navItems = [
  { href: '#home', label: 'Home' },
  { href: '#features', label: 'Features' },
  { href: '#how-it-works', label: 'So funktioniert\'s' },
  { href: '#faq', label: 'FAQ' }
];
---

<header class="fixed top-0 left-0 right-0 bg-dark-900/95 backdrop-blur-md border-b border-dark-700/30 z-50 transition-all duration-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="#home" class="flex items-center space-x-3 group">
          <div class="relative">
            <img src="/logo-white.png" alt="LoopCut Logo" class="h-8 w-auto transition-transform duration-300 group-hover:scale-105" />
          </div>
          <span class="hidden md:inline text-xl font-bold text-light-900 tracking-tight">LoopCut</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="text-light-600 hover:text-light-900 transition-colors duration-300 font-medium"
          >
            {item.label}
          </a>
        ))}
      </nav>

      <!-- CTA Button -->
      <div class="hidden md:block">
        <AppStoreButton size="small" />
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="text-light-600 hover:text-light-900 p-2 rounded-lg hover:bg-dark-700/50 transition-all duration-300"
          id="mobile-menu-button"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <svg class="h-6 w-6" id="menu-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="h-6 w-6 hidden" id="close-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="px-2 pt-2 pb-3 space-y-1 border-t border-dark-700/50 bg-dark-800/95 backdrop-blur-md rounded-b-xl">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="block px-4 py-3 text-light-600 hover:text-light-900 hover:bg-dark-700/50 transition-all duration-300 font-medium rounded-lg mobile-nav-link"
          >
            {item.label}
          </a>
        ))}
        <div class="mt-4 px-4">
          <AppStoreButton size="small" />
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');

    if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
      mobileMenuButton.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        
        if (isHidden) {
          mobileMenu.classList.remove('hidden');
          menuIcon.classList.add('hidden');
          closeIcon.classList.remove('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          mobileMenu.classList.add('hidden');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });

      // Close mobile menu when clicking on a nav link
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        });
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
          mobileMenu.classList.add('hidden');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script> 